var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _W3mAnnouncedConnector_wallets;
import { ConnectorNotFoundError } from '@wagmi/core';
import { InjectedConnector } from '@wagmi/core/connectors/injected';
const ANNOUNCE_EVENT = 'eip6963:announceProvider';
const REQUEST_EVENT = 'eip6963:requestProvider';
let provider = undefined;
export class W3mAnnouncedConnector extends InjectedConnector {
    constructor(config) {
        super({
            chains: config.chains,
            options: {
                shimDisconnect: true,
                getProvider: () => provider
            }
        });
        this.id = 'w3mAnnounced';
        this.name = 'w3mAnnounced';
        _W3mAnnouncedConnector_wallets.set(this, new Set());
        this.listenForWallets();
    }
    async connect(options) {
        const { rdns } = options;
        const wallet = [...__classPrivateFieldGet(this, _W3mAnnouncedConnector_wallets, "f")].find(w => w.info.rdns === rdns);
        if (!wallet?.provider) {
            throw new ConnectorNotFoundError();
        }
        provider = wallet.provider;
        return super.connect(options);
    }
    async disconnect() {
        await super.disconnect();
        provider = undefined;
    }
    listenForWallets() {
        if (typeof window === 'undefined') {
            return;
        }
        window.addEventListener(ANNOUNCE_EVENT, (event) => {
            if (event.detail) {
                __classPrivateFieldGet(this, _W3mAnnouncedConnector_wallets, "f").add(event.detail);
            }
        });
        window.dispatchEvent(new Event(REQUEST_EVENT));
    }
}
_W3mAnnouncedConnector_wallets = new WeakMap();
//# sourceMappingURL=W3mAnnouncedConnector.js.map